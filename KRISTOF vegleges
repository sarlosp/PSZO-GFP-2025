#pragma once

namespace WindowsForm {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for Form1
	/// </summary>
	public ref class Form1 : public System::Windows::Forms::Form
	{
	public:
		Form1(void)
		{
			InitializeComponent();
			this->Text = "y = x^3 - 6x^2 + 4x + 12";
			this->BackColor = Color::White;
			this->SetStyle(ControlStyles::ResizeRedraw, true);
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~Form1()
		{
			if (components)
			{
				delete components;
			}
		}

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container^ components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->SuspendLayout();
			// 
			// Form1
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(800, 600);
			this->Name = L"Form1";
			this->Text = L"Form1";
			this->Paint += gcnew System::Windows::Forms::PaintEventHandler(this, &Form1::Form1_Paint);
			this->ResumeLayout(false);
		}
#pragma endregion

	private: double fv(double x) {
		return x * x * x - 6 * x * x + 4 * x + 12;
	}

	private: double intervallumFelezes(double a, double b, double eps) {
		double fa = fv(a);
		double fb = fv(b);
		if (fa * fb >= 0) return Double::NaN;

		while ((b - a) > eps) {
			double c = (a + b) / 2;
			double fc = fv(c);
			if (fa * fc < 0) {
				b = c;
				fb = fc;
			}
			else {
				a = c;
				fa = fc;
			}
		}
		return (a + b) / 2;
	}

	private: System::Void Form1_Paint(System::Object^ sender, System::Windows::Forms::PaintEventArgs^ e) {
		Graphics^ vaszon = e->Graphics;
		Pen^ toll = gcnew Pen(Color::Black);
		Brush^ gyokEcset = Brushes::Red;

		int szelesseg = this->ClientRectangle.Width;
		int magassag = this->ClientRectangle.Height;

		double xMin = 0, xMax = 6;
		int szegely = 50;
		double yMin = Double::MaxValue, yMax = Double::MinValue;

		for (double x = xMin; x <= xMax; x += 0.01) {
			double y = fv(x);
			if (y < yMin) yMin = y;
			if (y > yMax) yMax = y;
		}

		double xSkala = (szelesseg - 2 * szegely) / (xMax - xMin);
		double ySkala = (magassag - 2 * szegely) / (yMax - yMin);

		int x0 = szegely + (int)((0 - xMin) * xSkala);
		int y0 = magassag - szegely - (int)((0 - yMin) * ySkala);
		vaszon->DrawLine(toll, szegely, y0, szelesseg - szegely, y0);
		vaszon->DrawLine(toll, x0, szegely, x0, magassag - szegely);

		for (int i = 0; i <= 6; i++) {
			int x = szegely + (int)((i - xMin) * xSkala);
			vaszon->DrawLine(toll, x, y0 - 5, x, y0 + 5);
			vaszon->DrawString(i.ToString(), SystemFonts::DefaultFont, Brushes::Black, x - 5, y0 + 5);
		}

		for (int i = (int)yMin; i <= (int)yMax; i += 10) {
			int y = magassag - szegely - (int)((i - yMin) * ySkala);
			vaszon->DrawLine(toll, x0 - 5, y, x0 + 5, y);
			vaszon->DrawString(i.ToString(), SystemFonts::DefaultFont, Brushes::Black, x0 + 5, y - 7);
		}

		vaszon->DrawString("y = x^3 - 6x^2 + 4x + 12", SystemFonts::DefaultFont, Brushes::Black, 10, 10);

		for (double x = xMin; x < xMax; x += 0.01) {
			double y1 = fv(x);
			double y2 = fv(x + 0.01);
			int px1 = szegely + (int)((x - xMin) * xSkala);
			int py1 = magassag - szegely - (int)((y1 - yMin) * ySkala);
			int px2 = szegely + (int)(((x + 0.01) - xMin) * xSkala);
			int py2 = magassag - szegely - (int)((y2 - yMin) * ySkala);
			vaszon->DrawLine(toll, px1, py1, px2, py2);
		}

		array<double>^ gyokok = gcnew array<double>(3);
		int talalt = 0;
		for (double a = xMin; a < xMax; a += 0.1) {
			double b = a + 0.1;
			if (fv(a) * fv(b) < 0) {
				double gyok = intervallumFelezes(a, b, 1e-6);
				if (!Double::IsNaN(gyok)) {
					gyokok[talalt++] = gyok;
					if (talalt >= 3) break;
				}
			}
		}

		for (int i = 0; i < talalt; i++) {
			double x = gyokok[i];
			double y = fv(x);
			int px = szegely + (int)((x - xMin) * xSkala);
			int py = magassag - szegely - (int)((y - yMin) * ySkala);
			vaszon->FillEllipse(gyokEcset, px - 5, py - 5, 10, 10);
			vaszon->DrawString("x â‰ˆ " + x.ToString("F4"), SystemFonts::DefaultFont, Brushes::Red, px + 5, py - 20);
		}
	}
	};
}
