#pragma once

namespace DugattyusAnimacio {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	public ref class Form1 : public System::Windows::Forms::Form
	{
	public:
		Form1(void)
		{
			InitializeComponent();
		}

	protected:
		~Form1()
		{
			if (components)
			{
				delete components;
			}
		}

	private: System::Windows::Forms::PictureBox^ pictureBox1;
	private: System::Windows::Forms::Button^ button1;
	private: System::Windows::Forms::Timer^ timer1;
	private: System::Windows::Forms::TrackBar^ trackBar1;

	private:
		System::ComponentModel::Container^ components;

#pragma region Windows Form Designer generated code
		void InitializeComponent(void)
		{
			this->components = (gcnew System::ComponentModel::Container());
			this->pictureBox1 = (gcnew System::Windows::Forms::PictureBox());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->timer1 = (gcnew System::Windows::Forms::Timer(this->components));
			this->trackBar1 = (gcnew System::Windows::Forms::TrackBar());
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->pictureBox1))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->trackBar1))->BeginInit();
			this->SuspendLayout();
			// 
			// pictureBox1
			// 
			this->pictureBox1->Dock = System::Windows::Forms::DockStyle::Fill;
			this->pictureBox1->Location = System::Drawing::Point(0, 0);
			this->pictureBox1->Name = L"pictureBox1";
			this->pictureBox1->Size = System::Drawing::Size(800, 450);
			this->pictureBox1->TabIndex = 0;
			this->pictureBox1->TabStop = false;
			// 
			// button1
			// 
			this->button1->Location = System::Drawing::Point(10, 10);
			this->button1->Size = System::Drawing::Size(60, 30);
			this->button1->Click += gcnew System::EventHandler(this, &Form1::button1_Click);
			// 
			// timer1
			// 
			this->timer1->Tick += gcnew System::EventHandler(this, &Form1::timer1_Tick);
			// 
			// trackBar1
			// 
			this->trackBar1->Location = System::Drawing::Point(80, 10);
			this->trackBar1->Size = System::Drawing::Size(200, 30);
			this->trackBar1->Scroll += gcnew System::EventHandler(this, &Form1::trackBar1_Scroll);
			// 
			// Form1
			// 
			this->Controls->Add(this->trackBar1);
			this->Controls->Add(this->button1);
			this->Controls->Add(this->pictureBox1);
			this->Resize += gcnew System::EventHandler(this, &Form1::Form1_Resize);
			this->Load += gcnew System::EventHandler(this, &Form1::Form1_Load);
			this->Text = L"Dugattyús animáció";
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->pictureBox1))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->trackBar1))->EndInit();
			this->ResumeLayout(false);
			this->PerformLayout();
		}
#pragma endregion

		// ==== GLOBÁLIS VÁLTOZÓK ====
		Graphics^ pgr, ^ gr;
		Pen^ toll;
		SolidBrush^ ecset;
		Bitmap^ bm;
		float fok = 90;
		float tx = 300;
		float ty = 500;
		float hr = 50;
		float hl = 300;
		float dw = 50;
		float dh = 50;

		// ==== SEGÉDFÜGGVÉNY ====
		double d2r(double d) {
			return Math::PI / 180 * d;
		}

		// ==== FORM LOAD ====
	private: System::Void Form1_Load(System::Object^ sender, System::EventArgs^ e) {
		this->Text = "Grafika";
		button1->Text = "Stop";
		trackBar1->Minimum = -30;
		trackBar1->Maximum = 30;

		toll = gcnew Pen(Color::Silver);
		ecset = gcnew SolidBrush(Color::Silver);

		bm = gcnew Bitmap(pictureBox1->Width, pictureBox1->Height);
		gr = Graphics::FromImage(bm);

		timer1->Interval = 10 + 150 - trackBar1->Value * 5;
		timer1->Start();
	}

		   // ==== FORM RESIZE ====
	private: System::Void Form1_Resize(System::Object^ sender, System::EventArgs^ e) {
		bm = gcnew Bitmap(pictureBox1->Width, pictureBox1->Height);
		gr = Graphics::FromImage(bm);
	}

		   // ==== GOMB ====
	private: System::Void button1_Click(System::Object^ sender, System::EventArgs^ e) {
		if (timer1->Enabled) {
			timer1->Enabled = false;
			button1->Text = "Start";
		}
		else {
			timer1->Enabled = true;
			button1->Text = "Stop";
		}
	}

		   // ==== TRACKBAR ====
	private: System::Void trackBar1_Scroll(System::Object^ sender, System::EventArgs^ e) {
		timer1->Interval = 10 + 150 - trackBar1->Value * 5;
	}

		   // ==== TIMER ====
	private: System::Void timer1_Tick(System::Object^ sender, System::EventArgs^ e) {
		gr->Clear(this->BackColor);
		gr->ResetTransform();
		gr->TranslateTransform(tx, ty);
		gr->ScaleTransform(1, -1);
		gr->RotateTransform(30);
		Dugattyu(); // első
		gr->RotateTransform(-60);
		fok += 180;
		Dugattyu(); // második
		fok -= 175; // folyamatos léptetés
		pictureBox1->Image = bm;
	}

		   // ==== DUGATTYÚ ====
		   void Dugattyu() {
			   toll->Width = 2;
			   toll->Color = Color::Silver;
			   toll->DashStyle = System::Drawing::Drawing2D::DashStyle::DashDot;
			   gr->DrawLine(toll, 0.0f, hl + hr + dh + 20, 0.0f, -2 * hr);
			   gr->DrawLine(toll, -2 * hr, 0.0f, 2 * hr, 0.0f);
			   gr->DrawEllipse(toll, -hr, -hr, 2 * hr, 2 * hr);

			   toll->DashStyle = System::Drawing::Drawing2D::DashStyle::Solid;
			   toll->Width = 4;
			   toll->Color = Color::Black;
			   float r = 1.5f * hr;
			   gr->DrawEllipse(toll, -r, -r, 2 * r, 2 * r);

			   gr->DrawLine(toll, -dw, hl + hr + dh, -dw, hl - hr);
			   gr->DrawLine(toll, +dw, hl + hr + dh, +dw, hl - hr);
			   gr->DrawLine(toll, -dw, hl + hr + dh, dw, hl + hr + dh);

			   float forgx = Math::Cos(d2r(fok)) * hr;
			   float forgy = Math::Sin(d2r(fok)) * hr;
			   float dgx = 0;
			   float dgy = forgy + Math::Sqrt(hl * hl - forgx * forgx);

			   toll->Width = 30;
			   gr->DrawLine(toll, forgx, forgy, dgx, dgy);

			   toll->Width = 2;
			   ecset->Color = Color::Silver;
			   gr->FillRectangle(ecset, -dw, dgy, 2 * dw, dh);
			   gr->DrawRectangle(toll, -dw, dgy, 2 * dw, dh);

			   r = 20;
			   gr->FillEllipse(ecset, forgx - r, forgy - r, 2 * r, 2 * r);
			   gr->DrawEllipse(toll, forgx - r, forgy - r, 2 * r, 2 * r);
			   gr->FillEllipse(ecset, -r, dgy - r, 2 * r, 2 * r);
			   gr->DrawEllipse(toll, -r, dgy - r, 2 * r, 2 * r);

			   float meret = hl + hr - dgy;
			   int szin = (int)(255 / (2 * hr) * meret);
			   ecset->Color = Color::FromArgb(150, 255, szin, szin);
			   gr->FillRectangle(ecset, -dw, dgy + dh, 2 * dw, meret);
			   gr->DrawRectangle(toll, -dw, dgy + dh, 2 * dw, meret);
		   }
	};
}
