function SolveEquilibriumManualCross()
    % SolveEquilibriumManualCross  Compute resultant force & moment, check eqm.
    %   Uses v–prefix for vectors (double arrays), d– for scalars.

    %% 1) Data: position & force vectors
    vRa = [10, 10, 0];    % position of Fa
    vRb = [20, 30, 0];    % position of Fb
    vRc = [15, 25, 0];    % reference point for eqm check
    vFa = [20, 10, 0];    % force at A
    vFb = [-20,-10, 0];   % force at B

    %% 2) Resultant force
    vFTotal = vFa + vFb;
    fprintf('Resultant Force vFTotal = [%.2f  %.2f  %.2f]\n', vFTotal);

    %% 3) Moments about O
    vMA = CrossProductVec(vRa, vFa);
    vMB = CrossProductVec(vRb, vFb);
    vMTotal = vMA + vMB;
    fprintf('Total Moment about O vMTotal = [%.2f  %.2f  %.2f]\n', vMTotal);

    %% 4) Check equilibrium about vRc
    vMA_rc = CrossProductVec(vRa - vRc, vFa);
    vMB_rc = CrossProductVec(vRb - vRc, vFb);
    vM_rc  = vMA_rc + vMB_rc;

    fprintf('\nAt reference point vRc = [%.2f  %.2f  %.2f]:\n', vRc);
    fprintf('  • vFTotal     = [%.2f  %.2f  %.2f]\n', vFTotal);
    fprintf('  • Total Moment vM_rc = [%.2f  %.2f  %.2f]\n', vM_rc);

    if all(abs(vFTotal) < 1e-10) && all(abs(vM_rc) < 1e-10)
        disp('→ The body IS in equilibrium about vRc.');
    else
        disp('→ The body is NOT in equilibrium about vRc.');
    end
end


%% ------------------------------------------------------------------------
function vC = CrossProductVec(vA, vB)
    % CrossProductVec  Manual cross product of two 3‐vectors
    %   vC = vA × vB
    vC = [  vA(2)*vB(3) - vA(3)*vB(2), ...
            vA(3)*vB(1) - vA(1)*vB(3), ...
            vA(1)*vB(2) - vA(2)*vB(1) ];
end
